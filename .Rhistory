library(tidyr)
library(dplyr)
library(WGCNA)
library(wesanderson)
library(Rmisc)
library(factoextra)
library(scales)
library(Rmisc)
library(tidyr)
library(pracma)
library(data.table)
library(fgsea)
load("~/GitHub/3-RNA-seq-analysis-pipeline-for-grape/.RData")
#cold data is the metadata file
coldata <- fread("sample_metadata.txt")
head(coldata)
#cts data is the gene count matrix file
cts_original <- fread("gene_count.txt")
#remove duplications
cts_original = cts_original[!duplicated(cts_original[,1]),]
cts <- cts_original[,-c(1,36)]
row.names(cts) = cts_original$V1
colnames(cts) <- coldata$Sample_name
#cold data is the metadata file
coldata <- fread("sample_metadata.txt")
coldata$Time <-as.numeric(coldata$Time)
coldata$Treatment <- factor(coldata$Treatment, levels = c("ABA","Control"))
#Deseq2 model: design = ~ Treatment + Time  However, the design can be more complicated by including interaction
dds <- DESeqDataSetFromMatrix(countData = cts, colData = coldata, design = ~ Treatment + Time)
#Low count gene filtering. Criteria: Averagely, at least one count per sample
keep <- rowSums(counts(dds)) >= ncol(cts)
dds <- dds[keep,]
dds_out <- DESeq(dds)
vsd <- vst(dds_out, blind=FALSE)
cts_normalized <- assay(vsd)
cts_normalized <- as.data.frame(cts_normalized)
coldata$Time <-as.numeric(coldata$Time)
coldata$Treatment <- factor(coldata$Treatment, levels = c("ABA","Control"))
#Deseq2 model: design = ~ Treatment + Time  However, the design can be more complicated by including interaction
dds <- DESeqDataSetFromMatrix(countData = cts, colData = coldata, design = ~ Treatment + Time)
#Low count gene filtering. Criteria: Averagely, at least one count per sample
keep <- rowSums(counts(dds)) >= ncol(cts)
dds <- dds[keep,]
dds_out <- DESeq(dds)
vsd <- vst(dds_out, blind=FALSE)
cts_normalized <- assay(vsd)
cts_normalized <- as.data.frame(cts_normalized)
#Here we use vsd count for PCA
PCA_All_genes <- prcomp(t(cts_normalized), scale = TRUE)
fviz_eig(PCA_All_genes)
eig.val_PCA_All_genes <- get_eigenvalue(PCA_All_genes)
res_idv_PCA_All_genes <- get_pca_ind(PCA_All_genes)
head(res_idv_PCA_All_genes$coord[,1:4])
#Here we use vsd count for PCA
PCA_All_genes <- prcomp(t(cts_normalized), scale = TRUE)
fviz_eig(PCA_All_genes)
eig.val_PCA_All_genes <- get_eigenvalue(PCA_All_genes)
res_idv_PCA_All_genes <- get_pca_ind(PCA_All_genes)
PCA_All_genes_figure_data <- data.frame(coldata,res_idv_PCA_All_genes$coord[,1:4])
PCA_All_genes_figure_data$Time <- factor(PCA_All_genes_figure_data$Time,
levels = c("0","6","12","24","48","72"),
labels = c("0 h", "6 h","12 h","24 h","48 h","72 h"))
percentVar_PCA_All_genes <- round(eig.val_PCA_All_genes$variance.percent,1)
PCA_All_genes_figure <- ggplot(PCA_All_genes_figure_data, aes(x=Dim.1, y=Dim.2, shape = Treatment)) +
scale_fill_manual(values = c("#FFFFCC","#FED976","#FEB24C", "#FD8D3C", "#FC4E2A", "#BD0026"), aesthetics = "fill") +
scale_shape_manual(values = c(21,24),labels = c("Control","ABA")) +
geom_point(aes(fill = Time), color= "Black", size = 4) +
xlab(paste0("PC1: ",percentVar_PCA_All_genes[1],"% variance")) +
ylab(paste0("PC2: ",percentVar_PCA_All_genes[2],"% variance")) +
theme_bw() +
theme(axis.line = element_line(colour = "black")) +
theme(axis.title = element_text(color = "black",size = 16, face = "bold" )) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(legend.direction = "vertical", legend.box = "vertical") +
theme(axis.text.y  = element_text(color = "black",size = 12),
axis.text.x  = element_text(color = "black",size = 12)) +
theme(plot.title= element_text(color="Black", size=18, face="bold.italic", hjust=0.5)) +
theme(legend.text = element_text(color="Black", size = 14, face = "bold")) +
theme(legend.title = element_text(color="Black", size = 14, face = "bold")) +
labs(fill = "Time post-treatment")  +
theme(legend.text = element_text(color="Black", size = 12, face = "bold")) +
theme(legend.title = element_text(color="Black", size = 12, face = "bold")) +
guides(fill = guide_legend(override.aes=list(shape=21),order = 2),shape = guide_legend(order = 1))
PCA_All_genes_figure
PCA_All_genes_figure_2 <- ggplot(PCA_All_genes_figure_data, aes(x=Dim.2, y=Dim.3, shape = Treatment)) +
scale_fill_manual(values = c("#FFFFCC","#FED976","#FEB24C", "#FD8D3C", "#FC4E2A", "#BD0026"), aesthetics = "fill") +
scale_shape_manual(values = c(21,24),labels = c("Control","ABA")) +
geom_point(aes(fill = Time), color= "Black", size = 4) +
xlab(paste0("PC2: ",percentVar_PCA_All_genes[2],"% variance")) +
ylab(paste0("PC3: ",percentVar_PCA_All_genes[3],"% variance")) +
theme_bw() +
theme(axis.line = element_line(colour = "black")) +
theme(axis.title = element_text(color = "black",size = 16, face = "bold" )) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(legend.direction = "vertical", legend.box = "vertical") +
theme(axis.text.y  = element_text(color = "black",size = 12),
axis.text.x  = element_text(color = "black",size = 12)) +
theme(plot.title= element_text(color="Black", size=18, face="bold.italic", hjust=0.5)) +
theme(legend.text = element_text(color="Black", size = 14, face = "bold")) +
theme(legend.title = element_text(color="Black", size = 14, face = "bold")) +
labs(fill = "Time post-treatment")  +
theme(legend.text = element_text(color="Black", size = 12, face = "bold")) +
theme(legend.title = element_text(color="Black", size = 12, face = "bold")) +
guides(fill = guide_legend(override.aes=list(shape=21),order = 2),shape = guide_legend(order = 1))
PCA_All_genes_figure_2
#Here we do WGCNA with vsd count as suggested by the author
datExpr = as.data.frame(t(cts_normalized))
nGenes = ncol(datExpr)
nSamples = nrow(datExpr)
#WGCNA setting
options(stringsAsFactors = FALSE)
#If there is a good reason, you can filter your sample again. For this tutorial, we will not filter anymore.
filtered_coldata <- coldata
datTraits <- data.frame(filtered_coldata[,-1])
row.names(datTraits) = filtered_coldata$Sample_name
# One-step network construction and module detection. Here we are using power = 12 as a default setting.
net = blockwiseModules(datExpr, power = 12, networkType = "signed",
TOMType = "signed", minModuleSize = 50,
reassignThreshold = 0, mergeCutHeight = 0.25,
numericLabels = TRUE, pamRespectsDendro = FALSE,
saveTOMs = TRUE,
saveTOMFileBase = "supervised_norm_count_TOM",
verbose = 3)
#Caution: WGCNA might conflict with other packages and resulted in "Error" by the end of blockwiseModules.
#to solve this, do "cor <- WGCNA::cor" before running blockwiseModules, and do "cor<-stats::cor" after the run is done.
#WGCNA result processing
table(net$colors)
mergedColors = labels2colors(net$colors)
table(mergedColors)
moduleLabels = net$colors
moduleColors = labels2colors(net$colors)
#Process eigengenes
MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
modNames = substring(names(MEs), 3)
#Here we do WGCNA with vsd count as suggested by the author
datExpr = as.data.frame(t(cts_normalized))
nGenes = ncol(datExpr)
nSamples = nrow(datExpr)
#WGCNA setting
options(stringsAsFactors = FALSE)
#If there is a good reason, you can filter your sample again. For this tutorial, we will not filter anymore.
filtered_coldata <- coldata
datTraits <- data.frame(filtered_coldata[,-1])
row.names(datTraits) = filtered_coldata$Sample_name
# One-step network construction and module detection. Here we are using power = 12 as a default setting.
net = blockwiseModules(datExpr, power = 12, networkType = "signed",
TOMType = "signed", minModuleSize = 50,
reassignThreshold = 0, mergeCutHeight = 0.25,
numericLabels = TRUE, pamRespectsDendro = FALSE,
saveTOMs = TRUE,
saveTOMFileBase = "supervised_norm_count_TOM",
verbose = 3)
#Here we do WGCNA with vsd count as suggested by the author
datExpr = as.data.frame(t(cts_normalized))
nGenes = ncol(datExpr)
nSamples = nrow(datExpr)
#WGCNA setting
options(stringsAsFactors = FALSE)
#If there is a good reason, you can filter your sample again. For this tutorial, we will not filter anymore.
filtered_coldata <- coldata
datTraits <- data.frame(filtered_coldata[,-1])
row.names(datTraits) = filtered_coldata$Sample_name
# One-step network construction and module detection. Here we are using power = 12 as a default setting.
net = blockwiseModules(datExpr, power = 12, networkType = "signed",
TOMType = "signed", minModuleSize = 50,
reassignThreshold = 0, mergeCutHeight = 0.25,
numericLabels = TRUE, pamRespectsDendro = FALSE,
saveTOMs = TRUE,
saveTOMFileBase = "supervised_norm_count_TOM",
verbose = 3)
#Caution: WGCNA might conflict with other packages and resulted in "Error" by the end of blockwiseModules.
#to solve this, do "cor <- WGCNA::cor" before running blockwiseModules, and do "cor<-stats::cor" after the run is done.
#WGCNA result processing
table(net$colors)
mergedColors = labels2colors(net$colors)
table(mergedColors)
moduleLabels = net$colors
moduleColors = labels2colors(net$colors)
#Process eigengenes
MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
modNames = substring(names(MEs), 3)
#Correlation analysis of MEs and your variables of interest. In the design of this experiment, we should care about if there are genes responding to 1) Treatment and 2) Time under treatment (columns 1 and 2)
#Here the number in c() should be the column number of your variable of interest
#WGCNA can only handle correlation analysis using numeric variables. Thus, we have to transform our treatment to boolean type values (0 or 1) to facilitate the analysis.
datTraits_analysis = datTraits
datTraits_analysis$Treatment = ifelse(datTraits_analysis$Treatment == 'ABA', 1, 0)
#So ABA is 1 and control is 0. A positive correlation of ME with Treatment means the genes in the module tend to be up-regulated by ABA compared to control.
moduleTraitCor = cor(MEs, datTraits_analysis[,c(1,2)], use = "p")
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples)
# Will display correlations and their p-values
textMatrix = paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor)
#Module_trait relationships plot
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = colnames(datTraits_analysis)[c(1,2)],
ySymbols = names(MEs),
yLabels = names(MEs),
colorLabels = FALSE,
colors =  blueWhiteRed(100),
setStdMargins = FALSE,
cex.text = 0.5,
textMatrix = textMatrix,
zlim = c(-1,1),
main = paste("Module-trait relationships"),
cex.lab.x = 0.7,
cex.lab.y = 0.5,
xLabelsAngle = 30,
xLabelsPosition = "bottom",
xLabelsAdj = 0.9)
##There might be some issues with showing the plot in Rmd
#Summary of number of gene per module
N_gene_per_module <- as.data.frame(table(mergedColors))
names(N_gene_per_module) = c("module_name", "Gene_number")
N_gene_per_module <- N_gene_per_module[order(-N_gene_per_module$Gene_number),]
module_name <- N_gene_per_module$module_name
N_gene_per_module$name_and_number <- paste("ME",N_gene_per_module$module_name," (",N_gene_per_module$Gene_number,")", sep ="")
#Visualization of Model eigengenes (MEs)
sample_name <- row.names(datTraits)
MEs_visualization <- data.frame(sample_name,MEs,datTraits)
MEs_visualization$Treatment <-factor(MEs_visualization$Treatment)
MEs_visualization_long <- gather(MEs_visualization,Module,ME,colnames(MEs)[1]:MEgrey, factor_key=TRUE)
#Summarizing
module_levels = paste0("ME",N_gene_per_module$module_name)
MEs_visualization_long$Module = factor(MEs_visualization_long$Module,levels = module_levels,labels  = N_gene_per_module$name_and_number)
MEs_visualization_long$Treatment <- factor(MEs_visualization_long$Treatment, levels = c("Control","ABA"))
MEs_visualization_long$Time <- factor(MEs_visualization_long$Time, levels = c("0","6","12","24","48","72"))
pd <- position_dodge(0.2)
MEs_visualization_1 <- ggplot (MEs_visualization_long,aes(x=Time, y=ME, group = Treatment, color = Treatment)) +
geom_jitter(size = 1.5, alpha = 0.8) +
geom_smooth(aes(x=Time, y=ME,fill =  Treatment), method = 'loess',alpha = 0.2) +
facet_wrap( ~ Module,scales = "free_y",ncol = 4) +
xlab("Time post-treatment (h)") +
ylab("Module eigengene") +
theme_bw() +
theme(axis.line = element_line(colour = "black")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(legend.direction = "vertical", legend.box = "vertical") +
theme(axis.text = element_text(color = "black",size = 10)) +
theme(strip.text=element_text(color="Black", size = 10, face = "bold"), strip.background = element_blank()) +
theme(axis.title = element_text(color = "black",size = 14, face = "bold" )) +
labs(color = "Treatment") +
scale_color_manual(values = c("red","blue")) +
scale_fill_manual(values = c("red","blue")) +
theme(axis.text.y = element_blank(),axis.ticks.y =  element_blank()) +
theme(legend.text = element_text(color="Black", size = 12, face = "bold")) +
theme(legend.title = element_text(color="Black", size = 12, face = "bold"))
MEs_visualization_1
#To test of hypothesis, the DeSeq2 model is simply just design = ~ Treatment
dds <- DESeqDataSetFromMatrix(countData = cts, colData = coldata, design = ~ Treatment)
#Low count genefiltering. Criterium: Averagely, at least one count per sample
keep <- rowSums(counts(dds)) >= ncol(cts)
dds <- dds[keep,]
#DESeq2
dds_out <- DESeq(dds)
#DESeq2
dds_out <- DESeq(dds)
resultsNames(dds_out)
ddsout_normalized <- data.frame(counts(dds_out,normalized=TRUE))
summary(results(dds_out, contrast=c("Treatment","ABA","Control")))
res_Treatment <- data.frame(results(dds_out, contrast=c("Treatment","ABA","Control")))
#Now lets assign the module of each genee
res_Treatment$module = moduleColors
colnames(res_Treatment)
View(res_Treatment)
#Filter the whole gene list based on padj LFC and module
res_Treatment_target = filter(res_Treatment, padj < 0.05, abs(log2FoldChange) > 2, module %in% c('brown','yellow','red','green'))
View(res_Treatment_target)
#Filter the whole gene list based on padj LFC and module
res_Treatment_target = filter(res_Treatment, padj < 0.05, abs(log2FoldChange) > 1, module %in% c('brown','yellow','red','green'))
View(res_Treatment_target)
setwd("~/GitHub/3-RNA-seq-analysis-pipeline-for-grape")
load("~/GitHub/3-RNA-seq-analysis-pipeline-for-grape/.RData")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(DESeq2)
library(ggpubr)
library(tidyr)
library(dplyr)
library(WGCNA)
library(wesanderson)
library(Rmisc)
library(factoextra)
library(scales)
library(Rmisc)
library(tidyr)
library(pracma)
library(data.table)
library(fgsea)
View(res_Treatment_target)
View(res_Treatment)
#res_Treatment is a df containing all the statistics of the contrast
res_Treatment <- data.frame(results(dds_out, contrast=c("Treatment","ABA","Control")))
View(res_Treatment)
View(dds_out)
View(datExpr)
View(cts_normalized)
View(ddsout_normalized)
View(cts_original)
View(cts)
row.names(cts)
res_Treatment$V1_gene_name = row.names(res_Treatment)
#Assign the module of each gene
res_Treatment$module = moduleColors
#Filter the whole gene list based on padj LFC and module
res_Treatment_target = filter(res_Treatment, padj < 0.05, abs(log2FoldChange) > 2, module %in% c('brown','yellow','red','green'))d
#Filter the whole gene list based on padj LFC and module
res_Treatment_target = filter(res_Treatment, padj < 0.05, abs(log2FoldChange) > 2, module %in% c('brown','yellow','red','green'))
View(res_Treatment_target)
View(cts)
#res_Treatment is a df containing all the statistics of the contrast
res_Treatment <- data.frame(results(dds_out, contrast=c("Treatment","ABA","Control")))
View(res_Treatment)
library(tidyverse)
library(ggplot2)
library(DESeq2)
library(ggpubr)
library(tidyr)
library(dplyr)
library(WGCNA)
library(wesanderson)
library(Rmisc)
library(factoextra)
library(scales)
library(Rmisc)
library(tidyr)
library(pracma)
library(data.table)
library(fgsea)
row.names(cts)
#res_Treatment is a df containing all the statistics of the contrast
res_Treatment <- results(dds_out, contrast=c("Treatment","ABA","Control"))
res_Treatment
#res_Treatment is a df containing all the statistics of the contrast
res_Treatment <- results(dds_out, contrast=c("Treatment","ABA","Control"))
res_Treatment$V1_gene_name = row.names(cts)
View(dds_out)
dds_out[,]
View(ddsout_normalized)
row.names(ddsout_normalized)
summary(results(dds_out, contrast=c("Treatment","ABA","Control")))
row.names(cts)[keep]
#res_Treatment is a df containing all the statistics of the contrast
res_Treatment <- results(dds_out, contrast=c("Treatment","ABA","Control"))
#res_Treatment is a df containing all the statistics of the contrast
res_Treatment <- results(dds_out, contrast=c("Treatment","ABA","Control"))
res_Treatment$V1_gene_name = row.names(cts)[keep]
View(res_Treatment)
#res_Treatment is a df containing all the statistics of the contrast
res_Treatment <- data.frame(results(dds_out, contrast=c("Treatment","ABA","Control")))
res_Treatment$V1_gene_name = row.names(cts)[keep]
#Assign the module of each gene
res_Treatment$module = moduleColors
#Filter the whole gene list based on padj LFC and module
res_Treatment_target = filter(res_Treatment, padj < 0.05, abs(log2FoldChange) > 1, module %in% c('brown','yellow','red','green'))
View(res_Treatment_target)
list <- read.delim("list_genes_vitis_correspondencesV3_1.txt", header = TRUE)
list <- read.delim("list_genes_vitis_correspondencesV3_1.txt", header = TRUE)
#res_Treatment is a df containing all the statistics of the contrast
res_Treatment <- data.frame(results(dds_out, contrast=c("Treatment","ABA","Control")))
#res_Treatment is a df containing all the statistics of the contrast
res_Treatment <- data.frame(results(dds_out, contrast=c("Treatment","ABA","Control")))
res_Treatment$V3_gene_name = row.names(cts)[keep]
#Assign the module of each gene
res_Treatment$module = moduleColors
#Filter the whole gene list based on padj LFC and module
res_Treatment_target = filter(res_Treatment, padj < 0.05, abs(log2FoldChange) > 1, module %in% c('brown','yellow','red','green'))
res_Treatment_target$V1_genename = list$v1.name[match(res_Treatment_target$V3_gene_name, list$Final.v3.name..tentative.creation.of.new.genes)]
View(res_Treatment_target)
View(res_Treatment_target)
list <- read.delim("list_genes_vitis_correspondencesV3_1.txt", header = TRUE)
list <- read.delim("list_genes_vitis_correspondencesV3_1.txt", header = TRUE)
Gene_function <- read.delim(file =  'Vitis_Net_gene_function.txt', header = T)
res_Treatment_target$V1_genename = list$v1.name[match(res_Treatment_target$V3_gene_name, list$Final.v3.name..tentative.creation.of.new.genes)]
list <- read.delim("list_genes_vitis_correspondencesV3_1.txt", header = TRUE)
list <- read.delim("list_genes_vitis_correspondencesV3_1.txt", header = TRUE)
Gene_function <- read.delim(file =  'Vitis_Net_gene_function.txt', header = T)
res_Treatment_target$encoding_protein = Gene_function$Functional.annotation[match(res_Treatment_target$V1_gene_name, Gene_function$Unique.ID)]
res_Treatment_target$V1_gene_name
res_Treatment_target$V1_genename = list$v1.name[match(res_Treatment_target$V3_gene_name, list$Final.v3.name..tentative.creation.of.new.genes)]
View(res_Treatment_target)
Gene_function$Unique.ID
res_Treatment_target$encoding_protein = Gene_function$Functional.annotation[match(res_Treatment_target$V1_gene_name, Gene_function$Unique.ID)]
Gene_function$Functional.annotation[match(res_Treatment_target$V1_gene_name, Gene_function$Unique.ID)]
Gene_function$Functional.annotation
match(res_Treatment_target$V1_gene_name, Gene_function$Unique.ID)
View(Gene_function)
probes = select$V1_name
probes = select$V1_name
probes = res_Treatment_target$V1_genename
probes2annot = match(probes, Gene_function$Unique.ID)
match(res_Treatment_target$V1_gene_name, Gene_function$Unique.ID)
res_Treatment_target$V1_gene_name = list$v1.name[match(res_Treatment_target$V3_gene_name, list$Final.v3.name..tentative.creation.of.new.genes)]
res_Treatment_target$encoding_protein = Gene_function$Functional.annotation[match(res_Treatment_target$V1_gene_name, Gene_function$Unique.ID)]
View(res_Treatment_target)
res_Treatment_target$pathway = Gene_function$Network[match(res_Treatment_target$V1_gene_name, Gene_function$Unique.ID)]
res_Treatment_target = filter(res_Treatment_target, !is.na(pathway), !pathway = '')
res_Treatment_target = filter(res_Treatment_target, !is.na(pathway), !pathway == '')
View(textMatrix)
#Filter the whole gene list based on padj LFC and module
res_Treatment_target = filter(res_Treatment, padj < 0.05, abs(log2FoldChange) > 1, module %in% c('brown','yellow','red','green'))
list <- read.delim("list_genes_vitis_correspondencesV3_1.txt", header = TRUE)
list <- read.delim("list_genes_vitis_correspondencesV3_1.txt", header = TRUE)
Gene_function <- read.delim(file =  'Vitis_Net_gene_function.txt', header = T)
Gene_function <- read.delim(file =  'Vitis_Net_gene_function.txt', header = T)
res_Treatment_target$V1_gene_name = list$v1.name[match(res_Treatment_target$V3_gene_name, list$Final.v3.name..tentative.creation.of.new.genes)]
res_Treatment_target$V1_gene_name = list$v1.name[match(res_Treatment_target$V3_gene_name, list$Final.v3.name..tentative.creation.of.new.genes)]
res_Treatment_target$encoding_protein = Gene_function$Functional.annotation[match(res_Treatment_target$V1_gene_name, Gene_function$Unique.ID)]
res_Treatment_target$pathway = Gene_function$Network[match(res_Treatment_target$V1_gene_name, Gene_function$Unique.ID)]
res_Treatment_target = filter(res_Treatment_target, !is.na(pathway), !pathway == '')
res_Treatment_target_gsea = data.frame(gene = res_Treatment_target$V1_gene_name, LFC = res_Treatment_target$log2FoldChange)
ranks = deframe(res_Treatment_target)
ranks = deframe(res_Treatment_target_gsea)
head(ranks, 200)
res_Treatment_target_gsea = data.frame(gene = res_Treatment_target$V1_gene_name, LFC = abs (res_Treatment_target$log2FoldChange))
View(res_Treatment_target_gsea)
ranks = deframe(res_Treatment_target_gsea)
head(ranks, 200)
class(ranks)
vitis_pathway <- gmtPathways("GSEA_geneset_from_VitisNet.gmt")
vitis_pathway <- gmtPathways("GSEA_geneset_from_VitisNet.gmt")
fgsearesult = fgsea(pathways = vitis_pathway,
stats = ranks,
minSize = 2,
maxSize = 500,
nperm = 10000)
View(fgsearesult)
fgsearesult = fgsea(pathways = vitis_pathway,
stats = ranks,
minSize = 2,
maxSize = 500)
library(devtools)
install_github("ctlab/fgsea")
library(fgsea)
fgsearesult = fgsea(pathways = vitis_pathway,
stats = ranks,
minSize = 2,
maxSize = 500)
fgsearesult = fgsea(pathways = vitis_pathway,
stats = ranks,
minSize = 2,
maxSize = 500)
View(fgsearesult)
head(fgseaRes[order(padj), ])
head(fgsearesult_all[order(padj), ])
fgsearesult_all = fgsea(pathways = vitis_pathway,
stats = ranks,
minSize = 2,
maxSize = 500)
fgsearesult_all = fgsea(pathways = vitis_pathway,
stats = ranks,
minSize = 2,
maxSize = 500)
head(fgsearesult_all[order(padj), ])
plotEnrichment(examplePathways[["vv23010Ribosome"]],
exampleRanks) + labs(title="Ribosomal proteins")
#Which pathway were enriched?
head(fgsearesult_all[order(padj), ])
plotEnrichment(examplePathways[["vv23010Ribosome"]],
ranks) + labs(title="Ribosomal proteins")
plotEnrichment(vitis_pathway[["vv23010Ribosome"]],
ranks) + labs(title="Ribosomal proteins")
#Which pathway were enriched?
head(fgsearesult_all[order(padj), ])
View(fgsearesult)
View(fgsearesult_all)
res_Treatment_target_gsea = res_Treatment_target_gsea[order(LFC),]
res_Treatment_target_gsea = res_Treatment_target_gsea[order(res_Treatment_target_gsea$LFC),]
res_Treatment_target_gsea$rank = 1:nrow(res_Treatment_target_gsea)
res_Treatment_target_gsea = res_Treatment_target_gsea[order(res_Treatment_target_gsea$LFC, decreasing = T),]
res_Treatment_target_gsea$rank = 1:nrow(res_Treatment_target_gsea)
res_Treatment_target_gsea = res_Treatment_target_gsea[,-2]
ranks = deframe(res_Treatment_target_gsea)
vitis_pathway <- gmtPathways("GSEA_geneset_from_VitisNet.gmt")
fgsearesult_all = fgsea(pathways = vitis_pathway,
stats = ranks,
minSize = 2,
maxSize = 500)
#Which pathway were enriched?
head(fgsearesult_all[order(padj), ])
plotEnrichment(vitis_pathway[["vv23010Ribosome"]],
ranks) + labs(title="Ribosomal proteins")
#We use GSEA for the pathway enrichment analysis
#Since the current gene name do not have proper functional annotation, we transform it to another gene name system that is properly annotated.
list <- read.delim("list_genes_vitis_correspondencesV3_1.txt", header = TRUE)
Gene_function <- read.delim(file =  'Vitis_Net_gene_function.txt', header = T)
res_Treatment_target$V1_gene_name = list$v1.name[match(res_Treatment_target$V3_gene_name, list$Final.v3.name..tentative.creation.of.new.genes)]
res_Treatment_target$encoding_protein = Gene_function$Functional.annotation[match(res_Treatment_target$V1_gene_name, Gene_function$Unique.ID)]
res_Treatment_target$pathway = Gene_function$Network[match(res_Treatment_target$V1_gene_name, Gene_function$Unique.ID)]
#Some filtering, e.g., if there is no pathway assigned to the gene, we are not using the gene to do the pathway enrichment analysis
res_Treatment_target = filter(res_Treatment_target, !is.na(pathway), !pathway == '')
#Dataframe preparation for GSEA (We rank only based on absolute LFC here, but you can also rank based on pval or padj)
#GSEA using all target DEGs
res_Treatment_target_gsea = data.frame(gene = res_Treatment_target$V1_gene_name, LFC = abs (res_Treatment_target$log2FoldChange))
res_Treatment_target_gsea = res_Treatment_target_gsea[order(res_Treatment_target_gsea$LFC, decreasing = T),]
res_Treatment_target_gsea$rank = 1:nrow(res_Treatment_target_gsea)
res_Treatment_target_gsea = res_Treatment_target_gsea[,-2]
ranks = deframe(res_Treatment_target_gsea)
vitis_pathway <- gmtPathways("GSEA_geneset_from_VitisNet.gmt")
fgsearesult_all = fgsea(pathways = vitis_pathway,
stats = ranks,
minSize = 2,
maxSize = 500)
#Which pathway were enriched?
head(fgsearesult_all[order(padj), ])
#It seems that Ribosome pathway was significantly enriched
plotEnrichment(vitis_pathway[["vv23010Ribosome"]],
ranks) + labs(title="Ribosomal proteins")
#The next step is to do gsea with only upregulated genes and only downregulated genes.
